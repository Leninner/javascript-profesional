{"version":3,"sources":["typeScript/index.ts"],"names":[],"mappings":"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","file":"typeScript.6fb26744.js","sourceRoot":"..","sourcesContent":["function sum(a: number, b: number) {\n    return a + b;\n}\n\nconst SUM = sum(78, 45);\n\nconsole.log(SUM);\n\n// Boolean\n\nlet booleano: boolean = false;\n\n// Números\n\nlet firstNumber: number = 45;\nlet secondNumber: number = 78;\n\nlet result = firstNumber + secondNumber;\n\n// String\n\nlet saludo: string = \"Me llamo Lucas\";\n\n// Arreglos\n\nlet peopple: string[] = [];\npeopple = [\"Lenin\", \"Mathias\", \"Carlos\", \"Pepe\"];\n\nlet numbers: number[] = [];\nnumbers.push(45);\nnumbers.push(789);\n\nlet numbersAndStrings: Array<string | number> = [];\nnumbersAndStrings.push(\"Lenin\");\nnumbersAndStrings.push(789);\n\n// Enum\n\nenum Colores {\n    rojo = \"Rojo\",\n    verde = \"Verde\",\n    azul = \"Azul\",\n    amarillo = \"Amarillo\",\n}\nlet colorFavorito: Colores = Colores.verde;\nconsole.log(`Mi color favorito es: ${colorFavorito}`);\n\n// Any\n\nlet comodin: any = \"Joker\";\ncomodin = { type: \"Wildcar\" };\n\n// Object\n\nlet someObject: object = { type: \"Wildcard\" };\n\n// Funciones\n\nfunction suma(a: number, b: number) {\n    return a + b;\n}\nconst add = suma(12, 78);\nconsole.log(add);\n\nfunction createAdder(a: number): (number) => number {\n    return function (b: number) {\n        return a + b;\n    };\n}\nconst sumar = createAdder(12);\nconst addTwelve = sumar(7);\n\nfunction fullName(name: string, lastName: string = \"Mazabanda\"): string {\n    return `${name} ${lastName}`;\n}\nconst richard = fullName(\"Richard\");\n\nconsole.log(richard);\n\n// Interfaces\n\nenum Color {\n    red = \"Red\",\n    green = \"Green\",\n}\n\ninterface Rectangulo {\n    ancho: number;\n    alto: number;\n    color?: Color;\n}\n\nlet rectan: Rectangulo = {\n    ancho: 4,\n    alto: 6,\n    color: Color.green,\n};\n\nfunction area(r: Rectangulo): number {\n    return r.ancho * r.alto;\n}\n\nconst areaRect = area(rectan);\nconsole.log(areaRect);\n\nrectan.toString = function () {\n    return this.color ? `Rectangulo ${this.color}` : \"Un rectángulo\";\n};\n\nconsole.log(rectan.toString());\n"]}